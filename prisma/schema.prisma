// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int               @id @default(autoincrement()) @unique
  friendCode         String            @unique
  email              String            @unique
  name               String
  password           String
  rating             Int
  ratingLimit        Int
  friends1           Friend[]          @relation("User1Friends")  // 첫 번째 친구 관계
  friends2           Friend[]          @relation("User2Friends")  // 두 번째 친구 관계
}

model PublicGoal {
  id                 Int               @id @default(autoincrement()) @unique
  title              String
  contents           String
  type               Boolean
  img                String
  rating             Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  complete           PublicComplete[]
}

model PrivateGoal {
  id                 Int               @id @default(autoincrement()) @unique
  userId             Int
  title              String
  contents           String
  type               Boolean
  img                String
  rating             Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
  complete           PrivateComplete[]
}

model PublicComplete {
  id                 Int               @id @default(autoincrement()) @unique
  userId             Int
  goal               PublicGoal        @relation(fields: [goalId], references: [id])
  goalId             Int               // 관계 스칼라 필드
  completedAt        DateTime          @default(now())
}

model PrivateComplete {
  id                 Int               @id @default(autoincrement()) @unique
  userId             Int
  goal               PrivateGoal       @relation(fields: [goalId], references: [id])
  goalId             Int               // 관계 스칼라 필드
  completedAt        DateTime          @default(now())
}

model Diary {
  id                 Int               @id @default(autoincrement()) @unique
  userId             Int
  contents           String
  mission            Int
  rating             Int
  createdAt          DateTime          @default(now())
  updatedAt          DateTime
}

model Friend {
  id         Int    @id @default(autoincrement())
  user1      User   @relation("User1Friends", fields: [userId1], references: [id])
  userId1    Int
  user2      User   @relation("User2Friends", fields: [userId2], references: [id])
  userId2    Int
  isAccepted Boolean

  @@unique([userId1, userId2])
}
